/***
 * @描述：日期时间范围选择类，继承Component
 * @author:create by wangchen 2017.7.26
 * @用途：可以根据定位目标元素渲染日期时间范围选择框，使用的daterangepicker组件
 * @使用中注意点如下：
 * 标签名称e-datetimepicker
 * 标签中的属性：
 * e-value ===>时间框的默认显示值
 * e-format ===>时间框的日期时间显示格式，yyyy-MM-dd hh:mm:ss
 * 其他：都为html原生属性或者其他第三方组件使用属性
 * html中使用举例如下：
   <e-daterangepicker name="search_createDate2" class="form-control" style="min-width:120px;" 
   readonly e-value="2015-06-12到2017-11-23" e-format="yyyy-MM-dd"> </e-daterangepicker>
 */
import BaseComponent from "../BaseComponent";
'use strict';
let __instance = null;
export default class EDaterangepicker extends BaseComponent {

    constructor() {
        super();
        this.name = 'e-daterangepicker';
    }

    static instance() {
        if (__instance == null) {
            __instance = new EDaterangepicker();
        }
        return __instance;
    }


    /**
     * @Override
     */
    generateHtml(args) {
        let html = [];
        html.push('<input type="text" ');
        html.push(this.generateDomAttrs(args.attributes));
        html.push('/>');
        return html.join('');
    }

    /**
     * @Override
     */
    executeAferRw(args) {

        let format = this.parseFormat(args.format);
        let timePicker = true;
        if (format.length <= 10) {
            timePicker = false;
        }
        $(args.content).daterangepicker({
                /* maxDate : moment(), //最大时间
                 dateLimit : {
                 days : 30
                 }, //起止时间的最大间隔
                 showDropdowns : true,
                 showWeekNumbers : false, //是否显示第几周
                 timePicker : true, //是否显示小时和分钟
                 timePickerIncrement : 60, //时间的增量，单位为分钟
                 timePicker12Hour : false, //是否使用12小时制来显示时间
                 ranges : {
                 //'最近1小时': [moment().subtract('hours',1), moment()],
                 '今日': [moment().startOf('day'), moment()],
                 '昨日': [moment().subtract('days', 1).startOf('day'), moment().subtract('days', 1).endOf('day')],
                 '最近7日': [moment().subtract('days', 6), moment()],
                 '最近30日': [moment().subtract('days', 29), moment()]
                 },
                 opens : 'right', //日期选择框的弹出位置
                 buttonClasses : [ 'btn btn-default' ],
                 applyClass : 'btn-small btn-primary blue',
                 cancelClass : 'btn-small',  */
                opens: 'right',
                linkedCalendars: false,
                showDropdowns: true,
                timePicker: timePicker,
                timePicker12Hour: false,
                ranges: {
                    //'最近1小时': [moment().subtract('hours',1), moment()],  
                    '今日': [moment().startOf('day'), moment()],
                    '昨日': [moment().subtract('days', 1).startOf('day'), moment().subtract('days', 1).endOf('day')],
                    '最近7日': [moment().subtract('days', 6), moment()],
                    '最近30日': [moment().subtract('days', 29), moment()]
                },

                locale: { //本地化
                    format: format, //控件中from和to 显示的日期格式 'YYYY-MM-DD HH:mm:ss'
                    separator: '至', //间隔显示
                    applyLabel: '确定',
                    cancelLabel: '取消',
                    fromLabel: '起始时间',
                    toLabel: '结束时间',
                    customRangeLabel: '自定义',
                    daysOfWeek: ['日', '一', '二', '三', '四', '五', '六'],
                    monthNames: ['一月', '二月', '三月', '四月', '五月', '六月',
                        '七月', '八月', '九月', '十月', '十一月', '十二月'
                    ],
                    firstDay: 1
                }
            }
            //, function(start, end, label) {//格式化日期显示框
            //     rangeHandles.find('span').html(start.format('YYYY-MM-DD HH:mm:ss') + ' - ' + end.format('YYYY-MM-DD HH:mm:ss'));
            //     console.log("New date range selected: ' + start.format('YYYY-MM-DD') + ' to ' + end.format('YYYY-MM-DD') + ' (predefined range: ' + label + ')");
            // }
        )
    }

    parseFormat(format) {
        if (typeof(format) == 'undefined' || format == '') {
            return 'YYYY-MM-DD';

        } else {
            //页面格式yyyy-MM-dd hh:mm:ss
            //需要使用格式YYYY-MM-DD HH:mm:ss
            let attrs = [];
            for (let v of format) {
                if (v == 'y' || v == 'd' || v == 'h') {
                    attrs.push(v.toUpperCase());
                } else if (v == 's') {
                    attrs.push(v.toLowerCase());
                } else {
                    attrs.push(v);
                }
            }

            return attrs.join('');
        }

    }

}
