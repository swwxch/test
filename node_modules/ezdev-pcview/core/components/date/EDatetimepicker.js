/***
 * @描述：日期时间选择类，继承Component
 * @author:create by wangchen 2017.7.26
 * @用途：可以根据定位目标元素渲染日期时间选择框，使用的datetimepicker组件
 * @使用中注意点如下：
 * 标签名称e-datetimepicker
 * 标签中的属性：
 * e-value ===>时间框的默认显示值
 * e-format ===>时间框的日期时间显示格式，yyyy-MM-dd hh:mm:ss
 * 其他：都为html原生属性或者其他第三方组件使用属性
 * 注意：id属性为必填
 * html中使用举例如下：
   <e-datetimepicker id="search_createDate2" name="search_createDate2" class="form-control" 
   e-value="2016-06-12" e-format="yyyy-MM-dd"></e-datetimepicker>
 */
import BaseComponent from "../BaseComponent";
'use strict';
let __instance = null;
export default class EDatetimepicker extends BaseComponent {

    constructor() {
        super();
        this.name = 'e-datetimepicker';
    }

    static instance() {
        if (__instance == null) {
            __instance = new EDatetimepicker();
        }
        return __instance;
    }


    /**
     * @Override
     */
    generateHtml(args) {
            //yyyy-MM-dd hh:mm:ss
            /*<div class="input-group date form_datetime  datetimepicker" data-date="{{createDate|dateFormat:'yyyy-MM-dd'}}" 
        data-date-format="yyyy-mm-dd" data-link-field="createDate">
    <input class="form-control" size="16" type="text" value="{{createDate|dateFormat:'yyyy-MM-dd'}}" readonly >
    <span class="input-group-addon"><span class="glyphicon glyphicon-remove"></span></span>
    <span class="input-group-addon"><span class="glyphicon glyphicon-th"></span></span>
</div><input type="hidden" id="createDate" name="createDate"   value="{{createDate|dateFormat:'yyyy-MM-dd'}}"  />*/
            let format = this.parseFormat(args.format);

            let id = args.el.attr('id');
            if (typeof(id) == 'undefined') {
                id = args.el.attr('name');
            }

            let html = [];
            //最外层div只允许传入style修改
            html.push('<div class="input-group date form_datetime " ');
            html.push('data-link-field="');
            html.push(id);
            html.push('" ');
            html.push('data-date-format="');
            html.push(format);
            html.push('" ');
            if (typeof(args.value) != 'undefined' && args.value != '') {
                html.push('data-date="');
                html.push(args.value);
                html.push('" ');
            }
            if (typeof(args.style) != 'undefined' && args.style != '') {
                html.push(' style="');
                html.push(args.style);
                html.push('" ');
            }
            // html.push(this.generateDomAttrs(args.attributes));
            html.push(' > ');
            html.push(this.generateHtmlDisplayInput(args));
            html.push(this.generateHtmlBtn(args));
            html.push(this.generateHtmlHidden(args));
            html.push('</div>');

            return html.join('');
        }
        //显示input 只是接受外部的class
    generateHtmlDisplayInput(args) {
        let attrs = args['attributes'];
        let htmlClass = null;
        if (typeof(attrs) != 'undefined' && attrs != '') {
            if (typeof(attrs.class) != 'undefined' && attrs.class != '') {
                htmlClass = attrs.class;
            }
        }
        let html = [];
        html.push('<input   type="text" readonly ');
        if (htmlClass != null) {
            html.push('class="');
            html.push(htmlClass);
            html.push('" ');
        }
        if (typeof(args.value) != 'undefined' && args.value != '') {
            html.push('value="');
            html.push(args.value);
            html.push('" ');
        }
        html.push('/>');
        return html.join('');
    }

    generateHtmlBtn(args) {
        let html = [];
        html.push('<span class="input-group-addon"><span class="glyphicon glyphicon-remove"></span></span>');
        html.push('<span class="input-group-addon"><span class="glyphicon glyphicon-th"></span></span>');

        return html.join('');
    }

    generateHtmlHidden(args) {
        let html = [];
        html.push('<input type="hidden"  ');
        let id = args.el.attr('id');
        if (typeof(id) == 'undefined') { //如果控件没有设置id，需要用name补一下
            id = args.el.attr('name');
            html.push('id="');
            html.push(id);
            html.push('" ');
        }
        html.push(this.generateDomAttrs(args.attributes));
        if (typeof(args.value) != 'undefined' && args.value != '') {
            html.push('value="');
            html.push(args.value);
            html.push('" ');
        }
        html.push('/>');
        return html.join('');
    }

    /**
     * @Override
     */
    executeAferRw(args) {
        let format = this.parseFormat(args.format);
        // $(args.content).daterangepicker({})
        var para = {
            language: 'zh-CN', //本地化
            todayBtn: 1,
            autoclose: 1,
            todayHighlight: 1,
            startView: 2,
            forceParse: 0,
            showMeridian: 1
        };
        if (format == 'yyyy-mm-dd') {
            para['minView'] = 2;
        }
        $(args.content).datetimepicker(para);

    }

    parseFormat(format) {
        if (typeof(format) == 'undefined' || format == '') {
            return 'yyyy-mm-dd';

        } else {
            //页面格式yyyy-MM-dd hh:mm:ss
            //需要使用格式yyyy-mm-dd hh:ii:ss
            let attrs = [];
            for (let v of format) {
                if (v == 'm') {
                    attrs.push('i');
                } else {
                    attrs.push(v.toLowerCase());
                }
            }

            return attrs.join('');
        }

    }

}
