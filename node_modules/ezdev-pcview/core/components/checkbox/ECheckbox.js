/***
 * @描述：复选框类，继承ERadio
 * @author:create by wangchen 2017.7.26
 * @用途：可以根据定位目标元素和数据渲染复选框，使用的icheck组件
 * @使用中注意点如下：
 * 标签名称e-checkbox
 * 标签中的属性：
 * e-option-value ===> 类optionValue属性，生成的复选框的value
 * e-option-text ===> 类optionText属性，生成的复选框的文字
 * e-value ===> 类中的value属性，默认符合该value的复选框被选中，多个默认值请用“,”分隔，如：e=value="a,b,c"
 * e-multiselect ===> multiselect属性，默认true，如果为false则只能选择一个
 * 其他：都为html原生属性或者其他第三方组件使用属性
 * html中使用举例如下：
   <e-checkbox class="form-control"   name="gwTypecc2" e-option-value="code" e-type='get'
      e-option-text="value" e-url="/test/dictionary/getChildrenByCode?code=gwType" e-value='sc,gl'
      e-domopt='replace'   datatype="*"  > </e-checkbox>

 */
import ERadio from "./ERadio";

'use strict';
let __instance = null;
export default class ECheckbox extends ERadio {

    constructor(options) {
        super();
        this.name = 'e-checkbox';

    }

    static instance() {
        if (__instance == null) {
            __instance = new ECheckbox();
        }
        return __instance;
    }

    /**
     * @Override
     */
    setArgsBeforeRw(args, options) {

        args = super.setArgsBeforeRw(args, options);

        if (typeof(args.multiselect) != 'undefined' && (args.multiselect == 'false' || args.multiselect == false)) {
            args.multiselect = false
        } else {
            args.multiselect = true;
        }

        if (typeof(args.value) == 'string' && args.value != '') {
            args.value = args.value.split(',');
        }

        return args;
    }

    /**
     * @Override
     */
    executeAferRw(args) {
        super.executeAferRw(args);
        if (!args.multiselect) {
            let name = args.name;
            let cks = args.parentContainer.find('input[name="' + name + '"]');
            cks.on('ifChecked', function(event) { //ifCreated 事件应该在插件初始化之前绑定 
                // alert(event.type + ' callback' + 'this:' + this);
                 cks.not(this).iCheck('uncheck').removeAttr('checked');
                 $(this).attr('checked',true);
               
            });

        }

    }

    /**
     * 复选框选中逻辑
     */
    generateCheckHtml(avalue, val) {
        if (typeof(avalue) != 'undefined' && avalue != null && avalue.length > 0) {
            let i = avalue.findIndex(function(value, index, arr) {
                return value == val;
            });
            if (i > -1) {
                return ' checked';
            }
        }
        return '';
    }

    /**
     * @Override
     */
    get type() {
        return 'checkbox';
    }

}
