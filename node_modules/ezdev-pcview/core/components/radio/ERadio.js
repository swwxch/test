/***
 * @描述：单选按钮类，继承Component
 * @author:create by wangchen 2017.7.26
 * @用途：可以根据定位目标元素和数据渲染单选按钮，使用的icheck组件
 * @使用中注意点如下：
 * 标签名称e-radio
 * 标签中的属性：
 * e-option-value ===> 类optionValue属性，生成的单选按钮的value
 * e-option-text ===> 类optionText属性，生成的单选按钮的文字
 * e-value ===> 类中的value属性，默认符合该value的单选按钮被选中
 * 其他：都为html原生属性或者其他第三方组件使用属性
 * html中使用举例如下：
   <e-radio class="form-control"   name="gwTypecc2" e-option-value="code" e-type='get'
      e-option-text="value" e-url="/test/dictionary/getChildrenByCode?code=gwType" e-value='sc'
      e-domopt='replace'   datatype="*"  > </e-radio>

 */
import BaseComponent from "../BaseComponent";

'use strict';
let __instance = null;
export default class ERadio extends BaseComponent {

    constructor() {
        super();
        this.name = 'e-radio';
    }

    static instance() {
        if (__instance == null) {
            __instance = new ERadio();
        }
        return __instance;
    }

    /**
     * @Override
     */
    setArgsBeforeRw(args, options) {

        /*args.optionValue = options.optionValue;
        args.optionText = options.optionText;
        args.value = options.value;*/
        // args.values = options.values;
        // args.alignText = options.alignText;
        args = super.setArgsBeforeRw(args, options);
        if (typeof(args.alignText) == 'undefined') {
            args.alignText = 'right';
        }


        return args;
    }

    /**
     * @Override
     */
    executeAferRw(args) {
        this.renderICheck(args.parentContainer);
    }

    /**
     * @Override
     */
    generateHtml(args) {
        let html = [],
            val, text;

        let data = args.data;
        if (data && Array.isArray(data)) {
            data.forEach(function(item) {
                val = item[args.optionValue || "code"];
                text = item[args.optionText || "value"];

                html.push('<label');
                html.push('>');
                if (args.alignText == 'left') {
                    html.push(text);
                }
                html.push('<input type="');
                html.push(this.type);
                html.push('" ');
                html.push(this.generateDomAttrs(args.attributes));
                html.push(this.generateCheckHtml(args.value,val));

                html.push('>');
                if (args.alignText == 'right') {
                    html.push(text);
                }
                html.push('</label>');

            }.bind(this));
        }


        let radioHtml = html.join('');

        return radioHtml;
    }

    renderICheck(parentDom) {
        //parentDom.find('input[type="radio"].minimal,input[type="checkbox"].minimal').iCheck({
        parentDom.find('input[type="radio"],input[type="checkbox"]').iCheck({
            checkboxClass: 'icheckbox_minimal-blue',
            radioClass: 'iradio_minimal-blue'
        })
    }

    generateCheckHtml(avalue,val){
        if(avalue == val){
            return ' checked'
        }
        return '';
    }

    get type() {
        return 'radio';
    }



}
