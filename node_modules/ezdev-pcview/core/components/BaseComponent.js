/***
 * @描述：组件基类
 * @author:create by wangchen 2017.7.26
 * @用途：编写组件都需要继承该基础类
 * @使用中注意点如下：
 * 1、关于子类编写：
 * 对象获取：使用时采用单例模式用静态方法instance获取对象
 *
 * 常用到的属性：name为标签名称，unique为缓存key，程序会自动将ajax读取的数据存入缓存，在下次读取url前会先读取缓存
 *
 * 对外接口方法:reWriteHtml(args)，args={el:(必填),data:[],url:string} 
 * 参数：
 * el为信息目标对象，可以为dom元素或者jquery选择器使用的字符串如"#id"                            
 * data与url两个选择一个，如果传入data参数，则组件用data渲染，否则用ajax读取url的数据后再渲染html
 *
 * 子类经常重写的方法：
 * generateHtml(必须重写),setArgsBeforeRw,executeAferRw，其中generateHtml为生成html
 * 方法必须重写。其他方法视自定义类情况而定。方法具体信息请看方法注释。
 * 
 * 子类经常复用的方法：
 * generateDomAttrs方法为，用于把目标元素的属性在新的dom上重新生成
 * 
 * 2、关于组件类在html中的使用：
 * 所有类在html中以自定义标签的形式存在，所有标签及标签上要使用的属性起名都应该以"e-"开头，html原生属性不在此范围
 * 举例如下：
 * <e-select class="form-control"  name="gwType" e-unique="gwType" e-option-value="code" 
                                   e-option-text="value" e-url="/test/dictionary/getChildrenByCode?code=gwType" e-value='sc'
                                   type="get" e-event="event:change,href:/showcase/comtest/test" 
                                   datatype="*"  >
                                  </e-select>
 * 3、html中e-标签的公用属性：
 * e-url ===> 类中的url属性，用于数据读取的地址
 * e-unique ==> 用于缓存的唯一标识key，如果使用该属性则启用缓存（可选）
 * e-type ===> 类中的type属性，用于ajax的类型，默认post，如果是get类型的http请求需要设置e-type=get
 * e-urlparam===>类中的urlparam属性，ajax在读取url前如果发现有该属性则会到参数中查找该属性对应的值，如果不存在则不读取url，常用于级联的使用中
 * e-domopt ======>类中的domopt属性，用于对目标定位元素加入html的方式，默认为replace操作，替换目标元素，其他方式请参照domOptType方法
 */
import ajaxRequest from "../ajax/AjaxRequest";
import cacheUtils from "../cache/CacheUtils";
import analyzerManager from "../render/analyzer/AnalyzerManager";
import BaseHandler from "../handler/BaseHandler";

'use strict';

export default class BaseComponent {

    constructor() {
        this.name = 'Component';
    }

    static instance() {
        return null;
    }

    /**
     * 对el的dom操作
     */
    static domOptType() {
        return {
            after: 'after',
            before: 'before',
            replace: 'replace',
            append: 'append'
        };
    }

    /**
     * 解析传入的dom元素
     * return $(dom)
     */
    static parseElObject(el) {
        if (Component.isJqueryObject(el)) {
            return el;
        } else if (typeof(el) == 'string' || Component.isDomObject(el)) {
            return $(el);
        } else {
            return null;
        }
    }

    //判断是否Jquery对象
    static isJqueryObject(obj) {
        return obj instanceof jQuery;
    }

    //判断是否Dom元素
    static isDomObject(obj) {
        let isDOM = (typeof HTMLElement === 'object') ?
            function(obj) {
                return obj instanceof HTMLElement;
            } :
            function(obj) {
                return obj && typeof obj === 'object' && obj.nodeType === 1 && typeof obj.nodeName === 'string';
            };
        return isDOM;
    }

    //对象是否已经生成
    /*static isExist(options){
        let el = Component.wrapEl(options.el);
        let attr = el.attr('componentid');
        if(attr && attr!=null && attr!=''){
            return true;
        }
        return false;
    }*/

    /**
     * 对外接口方法main
     * 重新目标dom的html
     * el:必填参数
     */
    reWriteHtml(options) {
        let args = {};
        $.extend(args, options);
        args.el = Component.parseElObject(options.el); //目标元素
        if (args.el == null) {
            return null;
        }
        args.data = options.data;
        args.domopt = options.domopt; //新增dom的操作方式，在目标元素执行after,before,replace,append
        if (typeof(options.attributes) != 'undefined') {
            args.attributes = options.attributes;
        }
        args.parentContainer = args.el.parent();
        args = this.setArgsBeforeRw(args, options);
        this.checkDataAndRwHtml(args);

        return args;
    }

    /**
     * 在重新html前，设置参数。页面标签的属性参数会覆盖js接口设置的参数，子类有需要可以重写
     */
    setArgsBeforeRw(args, options) {
        let items = args.el[0];
        let attrMap = items.attributes;
        args = this.getAttrsParam(args, attrMap);
        if (typeof(args['argsAttrs']) != 'undefined') {
            $.extend(args, args['argsAttrs']);
        }

        return args;
    }

    /**
     * 重新html后，封装dom后会执行的方法，子类有需要可以重写
     */
    executeAferRw(args, options) {

    }

    /**
     * 检查data是否有效，否则检查是否存在url，如果存在则执行ajax请求设置data
     * 获取data后，生成html
     */
    checkDataAndRwHtml(args) {

        this.fetchData(args).then(function(data) {
            args.data = data;
            let newDomHtml = this.generateHtml(args);
            let $newDom = $(newDomHtml);
            args.content = $newDom;
            this.wrapEl($newDom, args.domopt, args.el,newDomHtml);
            this.executeAferRw(args);
            let eventAnalyzer = analyzerManager.get('EventAnalyzer');
            eventAnalyzer.analyze(args.parentContainer);
            let routerAnalyzer = analyzerManager.get('RouterAnalyzer');
            routerAnalyzer.analyze(args.parentContainer);

        }.bind(this));

    }

    //生成对应的html，子类需要重写
    generateHtml() {
        //this.el.attr('componentid',this.id);  
        return '';
    }

    //获取jquery封装的dom对象的tagName
    getDomTagName($obj) {

        return $obj.prop("tagName");
    }

    //根据传入数据重新渲染html
    /*refresh(data){
        this.data = data;
        this.generateHtml();
    }*/
    /**
     * 将新生成的dom html 追加到el
     */
    wrapEl($newDom, domopt, el) {
        if (typeof(domopt) == 'undefined' || domopt == null || domopt == '') {
            domopt = 'replace';
        }

        switch (domopt) {
            case Component.domOptType().after:
                el.after($newDom);
                break;
            case Component.domOptType().before:
                el.before($newDom);
                break;
            case Component.domOptType().replace:
                 el.replaceWith($newDom);
                
                break;
            case Component.domOptType().append:
                el.append($newDom);
                break;
        }
    }

    /**
     * 生成htmldom属性的html字符串
     */
    generateDomAttrs(attributes) {
        let attrsHtml = [];
        if (typeof(attributes) != 'undefined' && attributes != null && attributes != '') {
            attrsHtml.push(' ');
            for (let i in attributes) {
                attrsHtml.push(i);
                attrsHtml.push('="');
                attrsHtml.push(attributes[i]);
                attrsHtml.push('"');
                attrsHtml.push(' ');
            }
        }

        return attrsHtml.join('');
    }

    //获取dom属性上的值
    getAttrsParam(args, attrMap) {
            // let args = {};
            let attributes = {};
            let argsAttrs = {}; //获取标签上的参数
            for (var i = 0; i < attrMap.length; i++) {
                args[attrMap[i].nodeName] = attrMap[i].nodeValue;
                attributes[attrMap[i].nodeName] = attrMap[i].nodeValue;
                if (typeof(attrMap[i].nodeName) != "undefined" && attrMap[i].nodeName.indexOf('e-') > -1) {
                    argsAttrs[this.transTagAttr2ArgsName(attrMap[i].nodeName)] = attrMap[i].nodeValue;
                }

                // console.log(attrMap[i].nodeName+':'+attrMap[i].nodeValue);
            }
            args['attributes'] = attributes;
            args['argsAttrs'] = argsAttrs;
            return args;
        }
        //将标签上的el-xx-xx参数转为class参数
    transTagAttr2ArgsName(name) {
        name = name.replace('e-', '');
        if (name.indexOf('-') <= 0) {
            return name;
        }
        let arr = name.split('-');

        for (let i = 0; i < arr.length; i++) {
            if (i > 0) {
                arr[i] = this.capUpperCase(arr[i]);
            }

        }

        return arr.join('');
    }

    //首字母大写
    capUpperCase(str) {
        return str.toLowerCase().replace(/( |^)[a-z]/g, (L) => L.toUpperCase());
    }

    /**
     * 获取下拉框所需要的数据
     * @param args
     * @returns {Promise}
     */
    fetchData(args) {
        return new Promise((resolve) => {
            let data = args.data;
            let cacheData = null;
            if (typeof(data) != 'undefined' && data != null && data.length > 0) {
                cacheData = data;
            } else {
                cacheData = cacheUtils.get(args.unique);
            }
            if (cacheData) {
                resolve(cacheData);
            } else if (typeof(args.url) != 'undefined' && args.url != '') {
                let urlparam = args.urlparam;
                let ifAjax = true;

                if (typeof(urlparam) != 'undefined' && urlparam.length > 0) {

                    if (typeof(args[urlparam]) != 'undefined') {
                        if (args.url.indexOf("?") > -1) {
                            args.url += '&' + urlparam + '=' + args[urlparam];
                        } else {
                            args.url += '?' + urlparam + '=' + args[urlparam];
                        }
                    } else {
                        ifAjax = false;
                    }
                }

                if (ifAjax) {
                    ajaxRequest.ajax(args).then((data)=> {
                        if (data && Array.isArray(data)) {
                            resolve(data);
                            if (typeof(args.unique) != 'undefined') {
                                cacheUtils.push(args.unique, data)
                            }

                        }


                    });

                    /*setTimeout(function(){
                        resolve([{code:'1',value:'测试1'},{code:'2',value:'测试2'}]);
                    },1);*/

                } else {
                    resolve(null);
                }


            } else {
                resolve(null);
            }
        });
    }

    get eventName(){
        //return 'E'+this.capUpperCase(this._name.replace('e-', ''));
        return this._name.replace('e-', '');
    }


    get name() {
        return this._name;
    }

    set name(value) {
        this._name = value;

    }

}
