/**
 * Created by zhaofs on 2017/5/23.
 * 事件处理
 */
let toString = Object.prototype.toString;
let slice = Array.prototype.slice;

let convert = function (item) {
    if (item == null) return [];
    let isEnumerable = (item != null && typeof item.length == 'number' && toString.call(item) != '[object Function]' );
    return (isEnumerable && typeof item != 'string') ? (typeof item == 'array') ? item : slice.call(item) : [item];
};

let delay = function (fn, delay, bind, args) {
    let pass = function (fn, args, bind) {
        let self = fn;
        if (args != null) args = convert(args);
        return function () {
            return self.apply(bind, args || arguments);
        };
    };
    return setTimeout(pass(fn, (args == null ? [] : args), bind), delay);
};

let removeOn = function (string) {
    return string.replace(/^on([A-Z])/, function (full, first) {
        return first.toLowerCase();
    });
};


export default class {
    constructor(options) {
        this.$events = {};
        //绑定事件
        if (options && typeof options === "object") for (let option in options) {
            if ((/^on[A-Z]/).test(option)) {
                this.addEvent(option, options[option]);
            }
        }
    }

    addEvent(type, fn) {
        type = removeOn(type);
        let fus = this.$events[type] || [];
        if (fus.indexOf(fn) < 0) {
            fus.push(fn);
            this.$events[type] = fus;
        }
        return this;
    }

    addEvents(events) {
        for (let type in events) {
            this.addEvent(type, events[type]);
        }
        return this;
    }

    fireEvent(type, args, delayTime) {
        type = removeOn(type);
        let events = this.$events[type];
        if (!events) return this;
        args = convert(args);
        events.forEach(function (fn) {
            if (delayTime) delay(fn, delayTime, this, args);
            else fn.apply(this, args);
        }, this);
        return this;
    }

    removeEvent(type, fn) {
        type = removeOn(type);
        let events = this.$events[type];
        if (events) {
            let index = events.indexOf(fn);
            if (index != -1) delete events[index];
        }
        return this;
    }

    removeEvents(events) {
        let type;
        if (typeof(events) == 'object') {
            for (type in events) this.removeEvent(type, events[type]);
            return this;
        }
        if (events) events = removeOn(events);
        for (type in this.$events) {
            if (events && events != type) continue;
            let fns = this.$events[type];
            for (let i = fns.length; i--;) if (i in fns) {
                this.removeEvent(type, fns[i]);
            }
        }
        return this;
    }
}

