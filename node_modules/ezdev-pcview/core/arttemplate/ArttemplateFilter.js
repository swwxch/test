/**
 * Created by zhaofs on 2017/5/10.
 * --------------------
 * - 对arttemplet进行扩展 -
 * -----------------------
 */
const runtime = require('art-template/lib/runtime');
runtime.dateFormat = function (date, format) {

    date = new Date(date);

    let map = {
        "M": date.getMonth() + 1, //月份
        "d": date.getDate(), //日
        "h": date.getHours(), //小时
        "m": date.getMinutes(), //分
        "s": date.getSeconds(), //秒
        "q": Math.floor((date.getMonth() + 3) / 3), //季度
        "S": date.getMilliseconds() //毫秒
    };
    format = format.replace(/([yMdhmsqS])+/g, function (all, t) {
        let v = map[t];
        if (v !== undefined) {
            if (all.length > 1) {
                v = '0' + v;
                v = v.substr(v.length - 2);
            }
            return v;
        }
        else if (t === 'y') {
            return (date.getFullYear() + '').substr(4 - all.length);
        }
        return all;
    });
    return format;
};


//alert函数
runtime.alertIt = function (obj) {
    alert("TemplateHelper AlertIt :[" + obj + "]");
};
runtime.alertItNote = function (obj, note) {
    alert(note + ":[" + obj + "]");
};
runtime.addObjp = function (userDefObj, propName) {
    let value = userDefObj["" + propName + ""];
    if (typeof(value) === "string") {
        value = parseInt(value);
    }
    userDefObj["" + propName + ""] = value + 1
};
runtime.minusObjp = function (userDefObj, propName) {
    let value = userDefObj["" + propName + ""];
    if (typeof(value) === "string") {
        value = parseInt(value);
    }
    userDefObj["" + propName + ""] = value - 1
};
runtime.getObjp = function (userDefObj, propName) {
    return userDefObj["" + propName + ""];
};
runtime.setObjp = function (userDefObj, propNameValue) {
    let pv = propNameValue.split(":");
    let propName = pv.shift();
    let value = pv.pop();
    userDefObj["" + propName + ""] = value;
};
runtime.incrementArraySize = function (userDefObj, size) {
    for (let i = 0; i < size; i++) {
        let mathR = Math.random();
        userDefObj[userDefObj.length] = mathR;
    }
};
runtime.initArray = function (userDefObj, propName) {
    userDefObj["" + propName + ""] = [];
};
runtime.random = function () {
    return Math.random();
};

runtime.transferToOriginal = function (userDefObj) {
    //http://192.168.23.194/
    let value = userDefObj;
    if (value.indexOf('MAX') > -1) {
        return value.replace('MAX', '');
    }
    return value;
};
