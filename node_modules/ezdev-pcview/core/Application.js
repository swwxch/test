/**
 * Created by zhaofs on 2016/7/19.
 * --------------------
 * - 单页面应用 -
 * --------------------
 * 生成单页面应用
 */

import Event from "./base/Events";

import Dispatcher from "./handler/Dispatcher";
import AjaxIntercept from "./ajax/AjaxIntercept";
import Layout from "./layout/Layout";

import componentManager from "./components/ComponentManager";
import analyzerManager from "./render/analyzer/AnalyzerManager";
import EventAnalyzer from "./render/analyzer/EventAnalyzer";
import RouterAnalyzer from "./render/analyzer/RouterAnalyzer";
import ComponentAnalyzer from "./render/analyzer/ComponentAnalyzer";
import ValidFormAnalyzer from "./render/analyzer/ValidFormAnalyzer";

import cacheManager from "./cache/CacheManager";
import DictionaryCache from "./cache/processor/DictionaryCache";

import appConfig from "./Config";


export default class extends Event {
    constructor(config) {
        super(config);
        this._config = $.extend(appConfig, config);

        //实例化必须依赖
        this.dispatcher = this.config.dispatcher || new Dispatcher();
        this.ajaxIntercept = this.config.ajaxIntercept || new AjaxIntercept();
        this.layout = this.config.layout || new Layout(this.config.menuUrl,this.config.menuId);
        this.layout.addEvent('initLayout', function () {
            this.fireEvent('initialized', this);
        }.bind(this));

        window.ezdev = this;

    }

    /**
     * 初始化应用
     */
    initApplication() {
        this.initComponents();
        this.initAnalyzers();
        this.initCache();

        //初始化调度器、Ajax请求拦截及布局控制
        this.dispatcher.initDispatcher();
        this.ajaxIntercept.initIntercept();
        this.layout.initLayout();
    }

    /**
    * 初始化所有的组件
    */
    initComponents(){
        componentManager.initComponents();
        if (this.config.components && this.config.components.length > 0) {
            this.config.components.forEach(function (com) {
                componentManager.add(com);
            });
        }
    }

    /**
     * 初始化分析器
     */
    initAnalyzers() {
        //添加元素分析
        let analyzer;
        if (this.config.analyzers && this.config.analyzers.length > 0) {
            this.config.analyzers.forEach(function (analyzer) {
                analyzer.initAnalyzer();
            });
        }
        if (!analyzerManager.has("EventAnalyzer")) {
            analyzer = new EventAnalyzer();
            analyzer.initAnalyzer();
        }
        if (!analyzerManager.has("RouterAnalyzer")) {
            analyzer = new RouterAnalyzer();
            analyzer.initAnalyzer();
        }
        if (!analyzerManager.has("ComponentAnalyzer")) {
            analyzer = new ComponentAnalyzer();
            analyzer.initAnalyzer();
        }
        if (!analyzerManager.has("ValidFormAnalyzer")) {
            analyzer = new ValidFormAnalyzer();
            analyzer.initAnalyzer();
        }

    }


    /**
     * 初始化缓存
     */
    initCache() {
        //添加缓存处理
        if (this.config.caches && this.config.caches.length > 0) {
            this.config.caches.forEach(function (cache) {
                cache.initCache();
            });
        }
        if (!cacheManager.has("Dictionary")) {
            new DictionaryCache(this.config.dictionaryUrl).initCache();
        }
    }

    get config() {
        return this._config;
    }

    set config(value) {
        this._config = value;
    }

};
