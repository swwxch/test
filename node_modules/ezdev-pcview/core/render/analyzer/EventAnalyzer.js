/**
 * Created by zhaofs on 2016/7/21.
 * --------------------
 * - 事件分析器 -
 * --------------------
 * 事件分析处理，对有属性e-handle的元素进行分析，并进行相应的事件处理
 */
import config from "../../Config";
import htmlUtils from "../../utils/HtmlUtils";
import eventUtils from "../../utils/EvenUtils";
import invoker from "../../handler/MethodInvoker";
import BaseAnalyzer from "./BaseAnalyzer";

export default class extends BaseAnalyzer {
    constructor() {
        super();
        this.name="EventAnalyzer";
    }

    analyze(content) {
        let events = $(content).find('[' + config.eventTag + ']');
        events.each(function (index, item) {
            let handleItem = $(item), eventInfo = this.resolveEvent(handleItem);
            //自动执行
            if (eventInfo.auto) {
                this.invokeHandler(eventInfo.href);
            }

            //事件执行 TODO 需要确认存在的可行性
            // handleItem.off(eventInfo.event);//add lhw 20170214先解除绑定
            // if (eventInfo.method === "noop") {//add lhw 20170321只解除绑定，不再绑定新事件
            //     return;
            // }
            handleItem.on(eventInfo.event, function (event) {
                eventUtils.setCurrentEventTarget($(event.currentTarget));
                this.invokeHandler(eventInfo.href);
                return false;
            }.bind(this));
        }.bind(this));
    }


    /**
     * 分析事件相关信息
     * @param item
     * @returns {{event: string, auto: boolean, href}}
     */
    resolveEvent(item) {
        let router = htmlUtils.getJsonByStr(item.attr(config.eventTag));
        return {
            event: router.event || 'click',
            auto: router.auto === 'true',
            href: router.href
        }
    }

    /**
     * 调用handler
     * @param href
     */
    invokeHandler(href) {
        let handlerInfo = invoker.resolveHandler(href);
        invoker.invoke(handlerInfo.path, handlerInfo.method, handlerInfo.args);
    }
};