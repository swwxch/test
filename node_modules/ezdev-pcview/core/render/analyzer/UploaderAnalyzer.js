/**
 * Created by lhw on 2016/8/24.
 * --------------------
 * - 上传控件分析器 -
 * --------------------
 * 上传控件处理，对uploader元素进行分析，并进行相应的事件处理
 */


import htmlUtils from "../../utils/HtmlUtils";
import miscUtils from "../../utils/MiscUtils";
import invoker from "../../handler/MethodInvoker";
import renderer from "../Renderer";
import BaseAnalyzer from "./BaseAnalyzer";

export default class extends BaseAnalyzer {
    constructor() {
        super();
        this.name = "UploaderAnalyzer";
        this.uploaderActionPrefix='uploader/upload';
        this.uploaderIdConfigMap={};
    }

    analyze(content) {

        //console.log("["+this.options.analyzerName+"][analyze] start.");

    	content = $(content);

    	//把upld元素解析生成upload控件
    	this.generateUploaders(content);

    	//注册uploadify事件，使得uploadify上传控件起作用。
    	this.registUploadify(content);

        //注册layui的uploader，使得layui的uploader上传控件起作用
        this.registLayui(content);

        //console.log("["+this.options.analyzerName+"][analyze] end.");

    }

    /**
     * 生成html上的各种uploader元素，如，input，button等。
     */
    generateUploaders(content){

        //查找所有的uploader元素
        let uploaders = content.find('uploader');
        if (uploaders.length > 0) {
            uploaders.each(function(index, item) {

                //把option读入config
                let config = this.analyzeOptionsToConfig($(item));

                //调用uploader主函数，生成uploader元素
                let configId = undefined;
                if( config.impl == "layui" ){
                    //调用jquery的uploaderLayui插件的uploaderLayui函数
                    configId = $(item).uploaderLayui({config : config});
                }else {
                    //调用jquery的uploadify插件的uploader函数
                    configId = $(item).uploader({config: config});
                }

                //为生成的元素填充事件
                this.fillEventsIntoUploader(config);

                //把config放入映射表
                this.putConfig(configId,config);

            }.bind(this));
        }
    }

    /**
     * 把option读入config
     */
    analyzeOptionsToConfig (item){

        //获得e-options属性的值
        let options = htmlUtils.getJsonByAttr(item);

        //用于向jquery.uploader.js传递数据的config对象
        let config = new Object();

        config.impl = options.impl||"layui";//底层实现（"uploadify"/"layui"），默认为"layui"
        config.type = options.type||"default";//uploader的类型（"img42"/"aLink"/"dad"/"default"/"son"）
        config.bid = options.bid;//使用者自定义id
        config.bidName = options.bidName;;//使用者需要自动赋值的bid标签name
        if( !config.bid || config.bid == null || config.bid == "null" || config.bid == "" ){
            config.bid = undefined;
        }
        config.suffix = options.suffix||"*.jpg;*.png;*.gif;*.jpeg;*.bmp";//允许上传哪些后缀的文件
        config.fileSize = options.fileSize||"";//允许上传文件的大小
        config.pixels = options.pixels||"original";//图片像素控制
        config.uploadSuccess = options.uploadSuccess;//上传成功后的回调函数
        config.storeType = options.storeType||"ftp";//后台存储类型控制，"fastDFS"/"ftp"，默认ftp.

        //自动生成的属性，无需手动设置：父层的uploaderId。
        config.parentId = options.parentId;
        config.isMulty  = options.isMulty;

        //其他判断
        config.isNormal = false;
        config.isSon = false;
        config.isDad = false;
        //子层
        if( config.type == "son" ){
            config.isSon = true;
        }else
        //父层
        if( config.type == "dad" ){
            config.isDad = true;
        }
        //普通
        else{
            config.isNormal = true;
        }
        //纯回显
        if( config.type.indexOf("showback") > 0 ){
            config.isShowBack = true;
        }

        //纯回显控件，aLink回显时，aLink的宽度
        config.aLinkShowBackALinkWidth = options.aLinkShowBackALinkWidth || '200px';
        //回显控件，aLink回显时，aLink的宽度
        config.aLinkALinkWidth = options.aLinkALinkWidth || '200px';

        if( config.suffix.indexOf('jpg') > 0 && config.suffix.indexOf("jpeg") < 0 ){
            config.suffix = "*.jpeg;"+config.suffix;
        }else if( config.suffix.indexOf('jpg') < 0 && config.suffix.indexOf("jpeg") > 0 ){
            config.suffix = "*.jpg;"+config.suffix;
        }

        let suffix = config.suffix;
        suffix = suffix.replace(/\*/g,"");
        suffix = suffix.replace(/\./g,"");
        let suffixs = suffix.split(";");
        config.acceptStr = "accept='"+this.analyzeSuffixToAccept(suffixs)+"'";

        //设置uploaderId
        let uploaderId = config.bid;
        //如果使用者自定义了bid，使用bid作为附件的唯一标识；如果未定义，生成。
        if( !uploaderId ){
            uploaderId= miscUtils.guid();
            var bidName = config.bidName;alert('bidName:'+bidName);
            if(typeof(bidName)!='undefined' && $('input[name="'+bidName+'"]').length>0){
                $('input[name="'+bidName+'"]').val(uploaderId);
            }
        }
        config.uploaderId = uploaderId;

        return config;
    }

    analyzeSuffixToAccept(suffixs){
        let acceptConfig ={
            "3gpp":"audio/3gpp,video/3gpp",
            "ac3":"audio/ac3",
            "asf":"allpication/vnd.ms-asf",
            "au":"audio/basic",
            "css":"text/css",
            "csv":"text/csv",
            "doc":"application/msword",
            "dot":"application/msword",
            "dtd":"application/xml-dtd",
            "dwg":"image/vnd.dwg",
            "dxf":"image/vnd.dxf",
            "gif":"image/gif",
            "htm":"text/html",
            "html":"text/html",
            "jp2":"image/jp2",
            "jpe":"image/jpeg",
            "jpeg":"image/jpeg",
            "jpg":"image/jpeg",
            "js":"text/javascript,application/javascript",
            "json":"application/json",
            "mp2":"audio/mpeg,video/mpeg",
            "mp3":"audio/mpeg",
            "mp4":"audio/mp4,video/mp4",
            "mpeg":"video/mpeg",
            "mpg":"video/mpeg",
            "mpp":"application/vnd.ms-project",
            "ogg":"application/ogg,audio/ogg",
            "pdf":"application/pdf",
            "png":"image/png",
            "pot":"application/vnd.ms-powerpoint",
            "pps":"application/vnd.ms-powerpoint",
            "ppt":"application/vnd.ms-powerpoint",
            "rtf":"application/rtf,text/rtf",
            "svf":"image/vnd.svf",
            "tif":"image/tiff",
            "tiff":"image/tiff",
            "txt":"text/plain",
            "wdb":"application/vnd.ms-works",
            "wps":"application/vnd.ms-works",
            "xhtml":"application/xhtml+xml",
            "xlc":"application/vnd.ms-excel",
            "xlm":"application/vnd.ms-excel",
            "xls":"application/vnd.ms-excel",
            "xlt":"application/vnd.ms-excel",
            "xlw":"application/vnd.ms-excel",
            "xml":"text/xml,application/xml",
            "zip":"aplication/zip"
        }
        let acceptValueStr = "";
        for( let i=0; i<suffixs.length; i++){
            if( suffixs[i] in  acceptConfig){
                acceptValueStr += acceptConfig[suffixs[i]];
                acceptValueStr += ",";
            }else{

            }
        }
        if( acceptValueStr.length > 0 ){
            acceptValueStr = acceptValueStr.substr(0,acceptValueStr.length-1);
        }
        return acceptValueStr;
    }

    /**
     * 把生成的元素填充上事件
     */
    fillEventsIntoUploader (config) {

        //删除按钮的事件
        let aLinkDeleteBtn = $('#udr-deleteSpan-'+config.uploaderId);
        //aLinkDeleteBtn.attr('e-handle',"event:click,href:/uploader/layui/upload/delete" );
        aLinkDeleteBtn.attr('e-event','href:/uploader/layui/upload/delete?url=/uploader/delete/'+config.uploaderId+'&code='+config.uploaderId+'&type=aLink');

        //aLink的事件
        if( config.showBackIsImg ){
            let titleStr = ",title:图片";
            let aLinkSpan = $('#udr-aLinkSpan-'+config.uploaderId+',#udr-aLink-showbackSpan-'+config.uploaderId);
            //aLinkSpan.attr('e-handle',"event:click,href:/uploader/layui/upload/dialog");
            aLinkSpan.attr('e-event','href:/uploader/layui/upload/dialog?data='+config.showBackUrl+'&move=false&tpl=uploader/layui/img'+ titleStr);
            let aLink = $('#udr-aLink-'+config.uploaderId+',#udr-aLink-showback-'+config.uploaderId);
            aLink.attr('href',config.showBackALinkHref);
            if(config.showBackIsPdf){
                aLink.attr('target','_blank');
            }else{
                aLink.removeAttr('target');
            }
        }else{
            let aLinkSpan = $('#udr-aLinkSpan-'+config.uploaderId+',#udr-aLink-showbackSpan-'+config.uploaderId);
            aLinkSpan.attr('e-event',"href:/uploader/layui/upload/noop");
            let aLink = $('#udr-aLink-'+config.uploaderId+',#udr-aLink-showback-'+config.uploaderId);
            aLink.attr('href',config.showBackALinkHref);
            if(config.showBackIsPdf){
                aLink.attr('target','_blank');
            }else{
                aLink.removeAttr('target');
            }
        }

        //img42回显的事件
        let img42ShowBack = $('#uploader-img-buttonArray-showback-'+config.uploaderId);
        //img42ShowBack.attr('e-handle',"event:click,href:/uploader/layui/upload/delete" );
        img42ShowBack.attr('e-event','href:/uploader/layui/upload/delete?url=/uploader/delete/'+config.uploaderId+'&code='+config.uploaderId+'&type=aLink');

    }

    /**
     * layui方式的注册
     */
    registLayui (content) {

        //查找所有的<upld .../>控件
        let uploaders = content.find('uploader');
        if (uploaders.length > 0) {

            //对所有的<upld .../>控件，执行
            uploaders.each(function(index, item) {

                //获取uploaderId和config
                let divMain = $(item).next();
                let configId = divMain.find('input[use="savedConfigId"]').val();
                let config = this.getConfig(configId);
                let uploaderId = config.uploaderId;

                //非layui类型无需注册
                if (config.impl != "layui") {
                    return;
                }
                //纯回显类型无需注册
                if (config.isShowBack){
                    return;
                }

                /**
                 * 设置如果是父子两层式的上传，父层的按钮点击后应打开"uploader/index"的模板html。
                 */
                if( config.isDad ){
                    let button = $('#udr-file-'+uploaderId+'-button');
                    button.attr('e-event','href:uploader/layui/upload/openSonUploader?parentId='+uploaderId);
                    // button.attr('e-options','parentId:'+uploaderId);
                    return;//如果是父层按钮，不需要注  册layui的uploader事件。（因为它的动作只是打开子层）
                }

                //把"*.jpg;*.png;*.gif"转换为"jpg|png|gif"
                let suffix = config.suffix;
                suffix = suffix.replace(/;/g,"|");
                suffix = suffix.replace(/\*/g,"");
                suffix = suffix.replace(/\./g,"");

                let bid = uploaderId;
                let multy = false;
                let pixels = config.pixels;
                let storeType = config.storeType;
                if( !config.isDad ){
                    if( config.isSon ){
                        bid = config.parentId;
                        multy = true;
                        let parentConfig = this.getConfig(config.parentId);
                        pixels = parentConfig.pixels ? parentConfig.pixels : "original";
                        storeType = parentConfig.storeType ? parentConfig.storeType : "ftp";
                        suffix = parentConfig.suffix.replace(/;/g,"|");
                        suffix = suffix.replace(/\*/g,"");
                        suffix = suffix.replace(/\./g,"");
                    }else{
                        bid = config.uploaderId;
                        multy = false;
                        pixels = config.pixels ? config.pixels : "original";
                        storeType = config.storeType ? config.storeType : "ftp";
                    }
                }

                console.log("[uploaderAnalyzer]suffix:"+suffix);

                let unwrap = config.type == "img42";

                //注册layui的uploader
                layui.use('upload', function(){
                    layui.upload({
                        unwrap:unwrap,//不使用layui的自带ui
                        elem:"[uploaderId='"+uploaderId+"']",
                        url:"uploader/upload/"+storeType+"/"+bid+"/"+multy+"/"+pixels,
                        method:"post",
                        before:function(){
                            //打开loading页面
                            config.loadingIndex = layer.load(1,{time: 3*1000});
                        }.bind(this),
                        success:function(){
                            //关闭Loading页面
                            layer.close(config.loadingIndex);

                            //上传控件的回显的刷新（重新发送请求获得已上传的附件的数据）
                            config.funRefreshUploader(config);
                            //重新添加事件
                            this.fillEventsIntoUploader(config);
                            //对新加的事件，激活eventAnalyzer，重新解析e-handle
                            renderer.analyzeHtml("udr-main-"+uploaderId);
                            renderer.analyzeHtml("udr-main-showback-"+uploaderId);

                            //如果是子层，每次上传成功后，需要调用uploader的handler进行回显
                            if( config.isSon ){
                                invoker.invoke("refreshSonList", config, "uploader/layui/upload");
                            }

                            //回调函数
                            if( config.uploadSuccess ){
                                let method = config.uploadSuccess.substring(config.uploadSuccess.lastIndexOf('/') + 1);
                                let href = config.uploadSuccess;
                                //调用指定的函数，参数为config
                                invoker.invoke(method, config, href);
                            }

                            //设置value
                            if( config.isSon ){
                                $('[uploader="'+config.parentId+'"]').attr('value',config.parentId);
                            }else{
                                $('[uploader="'+config.uploaderId+'"]').attr('value',config.uploaderId);
                            }
                        }.bind(this),
                        ext: suffix
                    });
                }.bind(this));

                //如果存在回调
                if( config.funAfterRegist ){
                    config.funAfterRegist(config);
                }

            }.bind(this));
        }

    }

	/**
     * uploadify方式的注册
     *
	 * 注册uploadify事件，使得上传控件起作用。
	 *
	 * 对父子双层上传控件的说明：
	 * 		父层，点击“上传文件”按钮后，打开的是上传文件子页面，
	 * 			子页面上的上传控件，为子上传控件，原“上传文件”按钮为父上传控件
	 * 		子层，点击“上传文件”按钮后，打开的是标准的windows的选择文件框
	 * 对普通上传控件的说明：
     * 	    点击“上传文件”按钮后，打开的是标准的windows的选择文件框
	 */
	registUploadify(content){

		//获取sessionid，
		//使用：uploadify的js控件向后台发送post请求时，带上sessionid
		//作用：在火狐浏览器下，保证上传成功。
		let sessionId = "";
		let c_name = 'JSESSIONID';//运行在tomcat下为'JSESSIONID'
		if(document.cookie.length>0){
		   let c_start=document.cookie.indexOf(c_name + "=")
		   if(c_start!=-1){
		     c_start=c_start + c_name.length+1
		     let c_end=document.cookie.indexOf(";",c_start)
		     if(c_end==-1) c_end=document.cookie.length
		     sessionId = unescape(document.cookie.substring(c_start,c_end));
		   }
		}

		//查找所有的<upld .../>控件
		let uploaders = content.find('uploader');
		if (uploaders.length > 0) {

			//对所有的<upld .../>控件，执行
			uploaders.each(function(index, item) {

                //获取uploaderId和config
                let divMain = $(item).next();
                let configId = divMain.find('input[use="savedConfigId"]').val();
                let config = this.getConfig(configId);
                let uploaderId = config.uploaderId;

                //layui类型无需注册
                if( config.impl == "layui" ){
                    return;
                }
                //纯回显类型无需注册
                if ( config.isShowBack ){
                    return;
                }

                let storeType = "";
                let bid = "";
                let multy = false;
                let pixels = "original";

                /**
				 * 生成uploaderAction地址：
                 * 对于son和normal(img42、aLink、default)类型，因为需要上传，所以需要action地址
                 * 对于dad类型，不需要上传，所以不需要action地址
				 */
                let uploaderAction = this.uploaderActionPrefix;
                if( !config.isDad ){
                    if( config.isSon ){
                        bid = config.parentId;
                        multy = true;
                        let parentConfig = this.getConfig(config.parentId);
                        pixels = parentConfig.pixels ? parentConfig.pixels : "original";
                        storeType = parentConfig.storeType ? parentConfig.storeType : "ftp";
                    }else{
                        bid = config.uploaderId;
                        multy = false;
                        pixels = config.pixels ? config.pixels : "original";
                        storeType = config.storeType ? config.storeType : "ftp";
                    }

                    //生成uploaderAction地址
                    uploaderAction = this.uploaderActionPrefix+"/"
                        +storeType+"/"
                        +bid+"/"
                        +multy+'/'
                        +pixels;
                }

                //post数据
				let uploadFormData = {};
                uploadFormData.bid = bid;
                uploadFormData.multy=multy;
                uploadFormData.pixels=pixels;
				if( sessionId != "" ){
					uploadFormData.sessionid = sessionId;
				}

				//此控件即为注册uploadify的主控件（注册uploadify后，会生成flash按钮等）
				let input = divMain.find("input[type='file']");

				//生成flash-object的控件（调用uploadify()函数）
				input.uploadify({
					'swf' :'common/plugins/uploadify/uploadify.swf?ver=' + Math.random(),
					'uploader'  : uploaderAction,
					'cancelImg' : 'common/plugins/uploadify/uploadify-cancel.png',
	 				'queueID' : 'fileQueue',//与下面的id对应
	 				'fileObjName'   : 'infile',
	 				'expressInstall':'expressInstall.swf',
	 				//上传的要求的描述（文件格式等）
					//'fileTypeDesc':((suffixDescription==undefined || suffixDescription=='')?'支持的格式：office文档（word/excel）格式，及一般图片格式':suffixDescription),
					//允许上传的文件后缀
					'fileTypeExts':((config.suffix==undefined || config.suffix == '') ? '*.doc;*.docx;*.xls;*.xlsm;*.xltx;*.xltm;*.xlsb;*.xlam;*.pdf;*.jpg;*.jpeg;*.png;*.bmp;*.gif;*.tiff' : config.suffix ),
					//上传文件的大小限制
					'fileSizeLimit':((config.fileSize==undefined || config.fileSize=='')? '10MB':config.fileSize),
					'auto' : true,
                    'formData':uploadFormData,//post数据
					'multi' : false,//单选
					'buttonText' : '选择文件',
					onFallback:function(){
						dialog({icon:'error',content: '您未安装FLASH控件，无法上传图片！<a  href="javascript:;" onclick=" window.open(\'http://get.adobe.com/cn/flashplayer/\')">请安装FLASH控件后再试</a>',lock:true});
			        },
					onUploadSuccess : function(file,data) {//上传完成时触发（每个文件触发一次）

                        //回显（重新发送请求获得已上传的附件的数据）
                        $(item).uploaderRefreshShowBack(config);
                        //激活eventAnalyzer，重新解析e-handle
                        renderer.analyzeHtml("udr-main-"+uploaderId);

						//回调函数
						if( config.uploadSuccess ){
                            let method = config.uploadSuccess.substring(config.uploadSuccess.lastIndexOf('/') + 1);
                            let href = config.uploadSuccess;
                            //调用指定的函数，参数为config
                            invoker.invoke(method, config, href);
						}

                        //如果是子层，每次上传成功后，需要调用uploader的handler进行回显
                        if( config.isSon ){
                            invoker.invoke("refreshSonList", config, "uploader/uploadify/upload");
                        }

                        //设置value
                        if( config.isSon ){
                            $('[uploader="'+config.parentId+'"]').attr('value',config.parentId);
                        }else{
                            $('[uploader="'+config.uploaderId+'"]').attr('value',config.uploaderId);
                        }

					}.bind(this),

		            onUploadError : function (file , errorCode, errorMsg , errorString) {
		                alert("id:" + file.id + " -索引:" + file.index + " -文件名称:" + file.name + " -文件大小:" + file.size + " -文件类型:" + file.type + " -创建日期:" + file.creationdate + " -修改日期:" + file.modificationdate + " -文件状态:" + file.filestatus + " –错误代码:" + errorCode + " –错误描述:" + errorMsg + " –简要错误描述:" + errorString);
		            }
				});

                /**
                 * 设置如果是父子两层式的上传，父层的按钮点击后应打开"uploader/index"的模板html。
                 */
                if( config.isDad ){
                    let swfObject = $('#udr-main-'+uploaderId).find('.swfupload');
                    swfObject.css({
                        'position' : 'absolute',
                        'z-index' : -1
                    });
                    let button = $('#udr-main-'+uploaderId).find('.uploadify-button');
                    button.attr('e-handle','event:click, href:uploader/uploadify/upload/openSonUploader');
                    button.attr('e-options','parentId:'+uploaderId);
                }

			}.bind(this));
		}
	}

    /**
     * 获取id对应的Config
     * @param id uploader的唯一识别id
     */
    getConfig(id) {
        if (this.uploaderIdConfigMap[id]) {
            return this.uploaderIdConfigMap[id];
        } else {
            return undefined;
        }
    }

    /**
     * 把(id,config)放入map
     * @param id uploader的唯一识别id
     * @param config uploader的config
     */
    putConfig(id, config) {
        this.uploaderIdConfigMap[id] = config;
    }

};


