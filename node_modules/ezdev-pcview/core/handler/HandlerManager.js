/**
 * Created by zhaofs on 2017/5/6.
 * --------------------
 * - Handle管理 -
 * --------------------
 * 实现对Handle统一管理
 */
let handlers = {};
let resolveHandlerFns = [];

export default {
    /**
     * 注册Handler
     */
    register: function (path, handler) {
        path = path.indexOf("/") === 0 ? path.substring(1) : path;
        handlers[path] = handler;
    },

    /**
     * 获取Handler
     * @param path
     * @returns {*}
     */
    resolveHandler: function (path) {
        return new Promise((resolve) => {
            let handler = handlers[path];
           /* console.log('handler=='+handler);
            for (var i in handlers) {
                 console.log(i+'=='+handlers[i]);
            }*/

            if (handler) {
                resolve(handler);
            } else {
                // //TODO如下代码可进一步优化
                // let promises = [];
                // resolveHandlerFns.forEach(function (resolveHandler) {
                //     promises.push(resolveHandler(path))
                // });
                // Promise.race(promises).then(function (handler) {
                //     handlers[path] = handler.default;
                //     resolve(handler.default);
                // });

                //TODO 暂时处理，待有时间再处理多路径导入支持
                resolveHandlerFns[0](path).then(function (handler) {
                    handlers[path] = handler.default;
                    resolve(handler.default);
                });
            }
        });
    },

    /**
     * 是否已经存在
     * @param path
     */
    isExist: function (path) {
        return !!handlers[path];
    },

    /**
     * 静态导入Handler对象
     * @param handlers
     */
    staticImport: function (handlers) {
        //声明式注册Handler
        if (typeof(handlers) === "object") {
            for (let key in handlers) {
                this.register(key, handlers[key])
            }
        } else {
            throw new Error("调用HandlerManager中staticImport方法错误请传递键值对对象如：{'system/dictionary': dictionary }！");
        }
    },


    /**
     * 动态导入Handler对象
     * @param resolveHandlerFn 导入方法
     */
    dynamicImport: function (resolveHandlerFn) {
        if (typeof(resolveHandlerFn) === "function") {
            resolveHandlerFns.push(resolveHandlerFn)
        } else {
            throw new Error("调用HandlerManager中dynamicImport方法错误请传递方法类型参数");
        }
    }
};