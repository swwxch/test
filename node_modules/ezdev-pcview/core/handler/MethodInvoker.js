/**
 * Created by zhaofs on 2017/5/6.
 * --------------------
 * - Handle方法调用 -
 * --------------------
 * 实现对Handler方法动态调用
 */
import handlerManage from "./HandlerManager";

export default {
    /**
     * Handler方法调用
     * @param handlerPath Handler路径
     * @param method Handler方法
     * @param args 对应参数
     */
    invoke: function (handlerPath, method, args) {
        handlerManage.resolveHandler(handlerPath).then(function (handler) {
            if (handler) {
                if (handler[method]) {
                    try {
                        console.trace('Handler[' + handlerPath + '] 中的 [' + method + "] 方法被调用，参数为：" + JSON.stringify(args));
                        let promise = handler[method].call(handler, args);
                        if (promise && promise.then) {
                            promise.then(function (data) {
                                handler.fireEvent(method + 'ed', {
                                    args: args,
                                    data: data
                                });
                            });
                        } else {
                            handler.fireEvent(method + 'ed', {args: args, data: {}});
                        }
                    } catch (e) {
                        console.error('调用Handler[' + handlerPath + ']中的[' + method + ']方法错误！', e);
                    }
                } else {
                    console.error('Handler [' + handlerPath + ']中无 ' + method + ' 方法！')
                }


            } else {
                console.error('无法找到Path为[' + handlerPath + ']的Handler！！')
            }
        });

    },

    /**
     * 分析Handler相关数据信息
     * @param handlerStr
     * @returns {{path: (string|*), method: (string|*), args: {}}}
     */
    resolveHandler: function (handlerStr) {
        let hash = handlerStr.split('?');
        let index = hash[0].lastIndexOf('/'),
            path = hash[0].substring(1, index),
            method = hash[0].substring(index + 1),
            args = {};

        if (hash.length > 1) {
            let urlArray = hash[1].split("&");
            for (let i = 0, len = urlArray.length; i < len; i++) {
                let urlItem = urlArray[i];
                let item = urlItem.split("=");
                args[item[0]] = item[1];
            }
        }

        return {
            path: path,
            method: method,
            args: args
        };
    }
};